/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as LangApp1IndexImport } from './routes/$lang/app1/index'
import { Route as LangApp1AboutImport } from './routes/$lang/app1/about'

// Create/Update Routes

const LangApp1IndexRoute = LangApp1IndexImport.update({
  id: '/$lang/app1/',
  path: '/$lang/app1/',
  getParentRoute: () => rootRoute,
} as any)

const LangApp1AboutRoute = LangApp1AboutImport.update({
  id: '/$lang/app1/about',
  path: '/$lang/app1/about',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/$lang/app1/about': {
      id: '/$lang/app1/about'
      path: '/$lang/app1/about'
      fullPath: '/$lang/app1/about'
      preLoaderRoute: typeof LangApp1AboutImport
      parentRoute: typeof rootRoute
    }
    '/$lang/app1/': {
      id: '/$lang/app1/'
      path: '/$lang/app1'
      fullPath: '/$lang/app1'
      preLoaderRoute: typeof LangApp1IndexImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/$lang/app1/about': typeof LangApp1AboutRoute
  '/$lang/app1': typeof LangApp1IndexRoute
}

export interface FileRoutesByTo {
  '/$lang/app1/about': typeof LangApp1AboutRoute
  '/$lang/app1': typeof LangApp1IndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/$lang/app1/about': typeof LangApp1AboutRoute
  '/$lang/app1/': typeof LangApp1IndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/$lang/app1/about' | '/$lang/app1'
  fileRoutesByTo: FileRoutesByTo
  to: '/$lang/app1/about' | '/$lang/app1'
  id: '__root__' | '/$lang/app1/about' | '/$lang/app1/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  LangApp1AboutRoute: typeof LangApp1AboutRoute
  LangApp1IndexRoute: typeof LangApp1IndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  LangApp1AboutRoute: LangApp1AboutRoute,
  LangApp1IndexRoute: LangApp1IndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/$lang/app1/about",
        "/$lang/app1/"
      ]
    },
    "/$lang/app1/about": {
      "filePath": "$lang/app1/about.tsx"
    },
    "/$lang/app1/": {
      "filePath": "$lang/app1/index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
